#include <Arduino.h>
#include <ArduinoBLE.h>

// Base64 decoding lookup table
static const char base64_chars[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

// Base64 decoding function
String base64Decode(const String& encoded) {
    String decoded = "";
    int val = 0, valb = -8;
    
    for (unsigned int i = 0; i < encoded.length(); i++) {
        char c = encoded[i];
        if (c == '=') break; // Padding character
        
        const char* pos = strchr(base64_chars, c);
        if (pos == nullptr) continue; // Invalid character
        
        val = (val << 6) + (pos - base64_chars);
        valb += 6;
        if (valb >= 0) {
            decoded += char((val >> valb) & 0xFF);
            valb -= 8;
        }
    }
    return decoded;
}

// Simple BLE configuration without complex constructors
// Using global variables to avoid constructor issues

// Service and characteristics - declared but not initialized until begin()
BLEService* configService = nullptr;
BLEStringCharacteristic* wifiSSIDChar = nullptr;  
BLEStringCharacteristic* wifiPasswordChar = nullptr;
BLEStringCharacteristic* togglTokenChar = nullptr;
BLEStringCharacteristic* workspaceIdChar = nullptr;
BLECharacteristic* projectIdsChar = nullptr;
BLEStringCharacteristic* statusChar = nullptr;

// Configuration data storage
String receivedSSID = "";
String receivedPassword = "";
String receivedToken = "";
String receivedWorkspace = "";
int receivedProjectIds[6] = {0, 0, 0, 0, 0, 0};
bool configComplete = false;
bool projectIdsReceived = false;

// BLE initialization state
bool bleInitialized = false;
String deviceName = "";

// Forward declaration
void checkConfigComplete();

// UUIDs
#define TIMETRACKER_SERVICE_UUID "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
#define WIFI_SSID_CHAR_UUID     "6ba7b811-9dad-11d1-80b4-00c04fd430c8"
#define WIFI_PASSWORD_CHAR_UUID "6ba7b812-9dad-11d1-80b4-00c04fd430c8"
#define TOGGL_TOKEN_CHAR_UUID   "6ba7b813-9dad-11d1-80b4-00c04fd430c8"
#define WORKSPACE_ID_CHAR_UUID  "6ba7b814-9dad-11d1-80b4-00c04fd430c8"
#define PROJECT_IDS_CHAR_UUID   "6ba7b815-9dad-11d1-80b4-00c04fd430c8"
#define STATUS_CHAR_UUID        "6ba7b816-9dad-11d1-80b4-00c04fd430c8"

// Callback functions
void onWifiSSIDWritten(BLEDevice central, BLECharacteristic characteristic) {
    int length = characteristic.valueLength();
    if (length > 0 && length < 128) { // Allow more space for base64 encoded data
        const uint8_t* data = characteristic.value();
        String base64Data = "";
        for (int i = 0; i < length; i++) {
            base64Data += (char)data[i];
        }
        
        // Debug: Print hex dump of received data
        Serial.print("Raw BLE data (");
        Serial.print(length);
        Serial.print(" bytes): ");
        for (int i = 0; i < length; i++) {
            if (data[i] < 16) Serial.print("0");
            Serial.print(data[i], HEX);
            Serial.print(" ");
        }
        Serial.println();
        
        Serial.print("Raw string received: '");
        Serial.print(base64Data);
        Serial.println("'");
        
        // Use the raw string directly - no Base64 decoding needed
        receivedSSID = base64Data;
        Serial.print("Final SSID: '");
        Serial.print(receivedSSID);
        Serial.println("'");
        Serial.print("WiFi SSID received (base64 length: ");
        Serial.print(base64Data.length());
        Serial.print(", decoded length: ");
        Serial.print(receivedSSID.length());
        Serial.print("): '");
        Serial.print(receivedSSID);
        Serial.println("'");
        
        // Update status
        if (statusChar) {
            statusChar->writeValue("ssid_received");
        }
    }
}

void onWifiPasswordWritten(BLEDevice central, BLECharacteristic characteristic) {
    int length = characteristic.valueLength();
    if (length > 0 && length < 128) { // Allow more space for base64 encoded data
        const uint8_t* data = characteristic.value();
        String base64Data = "";
        for (int i = 0; i < length; i++) {
            base64Data += (char)data[i];
        }
        
        // Use raw string directly - no Base64 decoding needed
        receivedPassword = base64Data;
        Serial.print("WiFi password received (base64 length: ");
        Serial.print(base64Data.length());
        Serial.print(", decoded length: ");
        Serial.print(receivedPassword.length());
        Serial.println(") - content hidden for security");
        
        // Update status
        if (statusChar) {
            statusChar->writeValue("password_received");
        }
    }
}

void onTogglTokenWritten(BLEDevice central, BLECharacteristic characteristic) {
    int length = characteristic.valueLength();
    Serial.print("Toggl token BLE data received - length: ");
    Serial.println(length);
    
    if (length > 0 && length < 512) { // Allow more space for base64 encoded data
        const uint8_t* data = characteristic.value();
        String base64Data = "";
        for (int i = 0; i < length; i++) {
            base64Data += (char)data[i];
        }
        
        // Use raw string directly - no Base64 decoding needed
        receivedToken = base64Data;
        Serial.print("Toggl token received (base64 length: ");
        Serial.print(base64Data.length());
        Serial.print(", decoded length: ");
        Serial.print(receivedToken.length());
        Serial.println(") - content hidden for security");
        
        // Update status
        if (statusChar) {
            statusChar->writeValue("token_received");
        }
        
        // Don't check completion here - wait for all data
    } else {
        Serial.print("Invalid Toggl token length - expected 1-511, got: ");
        Serial.println(length);
    }
}

void onWorkspaceIdWritten(BLEDevice central, BLECharacteristic characteristic) {
    int length = characteristic.valueLength();
    if (length > 0 && length < 32) { // Allow more space for base64 encoded data
        const uint8_t* data = characteristic.value();
        String base64Data = "";
        for (int i = 0; i < length; i++) {
            base64Data += (char)data[i];
        }
        
        // Use raw string directly - no Base64 decoding needed
        receivedWorkspace = base64Data;
        Serial.print("Workspace ID received (base64 length: ");
        Serial.print(base64Data.length());
        Serial.print(", decoded length: ");
        Serial.print(receivedWorkspace.length());
        Serial.print("): ");
        Serial.println(receivedWorkspace);
        
        // Update status
        if (statusChar) {
            statusChar->writeValue("workspace_received");
        }
        
        // Don't check completion here - wait for project IDs
    }
}

void onProjectIdsWritten(BLEDevice central, BLECharacteristic characteristic) {
    const uint8_t* data = characteristic.value();
    int dataLength = characteristic.valueLength();
    
    Serial.print("Project IDs data received: ");
    Serial.print(dataLength);
    Serial.println(" bytes");
    
    if (dataLength == 24) { // 6 integers * 4 bytes each
        // Convert byte array to integers (little endian)
        for (int i = 0; i < 6; i++) {
            receivedProjectIds[i] = (data[i*4]) | 
                                   (data[i*4 + 1] << 8) | 
                                   (data[i*4 + 2] << 16) | 
                                   (data[i*4 + 3] << 24);
        }
        Serial.println("Project IDs parsed successfully:");
        for (int i = 0; i < 6; i++) {
            Serial.print("  Orientation[" + String(i) + "]: ");
            Serial.println(receivedProjectIds[i]);
        }
        
        // Mark project IDs as received
        projectIdsReceived = true;
        
        // Update status
        if (statusChar) {
            statusChar->writeValue("projects_received");
        }
        
        checkConfigComplete();
    } else {
        Serial.print("Invalid project IDs data length - expected 24 bytes, got ");
        Serial.println(dataLength);
    }
}

void checkConfigComplete() {
    // Check if we have ALL required configuration (WiFi + Toggl token + workspace ID + project IDs)
    if (receivedSSID.length() > 0 && receivedPassword.length() > 0 && 
        receivedToken.length() > 0 && receivedWorkspace.length() > 0 && projectIdsReceived) {
        configComplete = true;
        Serial.println("FULL configuration complete! Ready to test WiFi connection.");
        if (statusChar) {
            statusChar->writeValue("config_complete");
        }
    } else {
        Serial.print("Configuration progress: SSID=");
        Serial.print(receivedSSID.length() > 0 ? "✓" : "✗");
        Serial.print(" Password=");
        Serial.print(receivedPassword.length() > 0 ? "✓" : "✗");
        Serial.print(" Token=");
        Serial.print(receivedToken.length() > 0 ? "✓" : "✗");
        Serial.print(" Workspace=");
        Serial.print(receivedWorkspace.length() > 0 ? "✓" : "✗");
        Serial.print(" Projects=");
        Serial.println(projectIdsReceived ? "✓" : "✗");
    }
}

bool simpleBLEBegin() {
    Serial.println("Starting Simple BLE Configuration Service...");
    
    // Check if already initialized
    if (bleInitialized) {
        Serial.println("BLE already initialized, restarting advertising...");
        Serial.print("Current stored device name: ");
        Serial.println(deviceName.length() > 0 ? deviceName : "EMPTY");
        
        // Stop and restart advertising with preserved device name
        BLE.stopAdvertise();
        delay(100);
        
        // Restore device name
        if (deviceName.length() > 0) {
            BLE.setDeviceName(deviceName.c_str());
            BLE.setLocalName(deviceName.c_str());
            Serial.println("Restored device name: " + deviceName);
        } else {
            Serial.println("WARNING: No stored device name to restore!");
        }
        
        // Restart advertising
        BLE.advertise();
        Serial.println("BLE advertising restarted");
        return true;
    }
    
    // First-time initialization
    if (!BLE.begin()) {
        Serial.println("ERROR: BLE.begin() failed!");
        return false;
    }
    
    Serial.println("BLE initialized successfully");
    
    // Create service and characteristics (only once)
    configService = new BLEService(TIMETRACKER_SERVICE_UUID);
    wifiSSIDChar = new BLEStringCharacteristic(WIFI_SSID_CHAR_UUID, BLEWrite, 128); // Increased for base64
    wifiPasswordChar = new BLEStringCharacteristic(WIFI_PASSWORD_CHAR_UUID, BLEWrite, 128); // Increased for base64
    togglTokenChar = new BLEStringCharacteristic(TOGGL_TOKEN_CHAR_UUID, BLEWrite, 512); // Increased for base64
    workspaceIdChar = new BLEStringCharacteristic(WORKSPACE_ID_CHAR_UUID, BLEWrite, 32); // Increased for base64
    projectIdsChar = new BLECharacteristic(PROJECT_IDS_CHAR_UUID, BLEWrite, 24); // 6 integers * 4 bytes
    statusChar = new BLEStringCharacteristic(STATUS_CHAR_UUID, BLERead | BLENotify, 32);
    
    // Set device name and store it
    String macAddress = BLE.address();
    String last4 = macAddress.substring(macAddress.length() - 5);
    last4.replace(":", "");
    deviceName = "TimeTracker-" + last4;
    
    BLE.setDeviceName(deviceName.c_str());
    BLE.setLocalName(deviceName.c_str());
    
    // Set initial status
    statusChar->writeValue("setup_mode");
    
    // Set event handlers
    wifiSSIDChar->setEventHandler(BLEWritten, onWifiSSIDWritten);
    wifiPasswordChar->setEventHandler(BLEWritten, onWifiPasswordWritten);
    togglTokenChar->setEventHandler(BLEWritten, onTogglTokenWritten);
    workspaceIdChar->setEventHandler(BLEWritten, onWorkspaceIdWritten);
    projectIdsChar->setEventHandler(BLEWritten, onProjectIdsWritten);
    
    // Add characteristics to service
    configService->addCharacteristic(*wifiSSIDChar);
    configService->addCharacteristic(*wifiPasswordChar);
    configService->addCharacteristic(*togglTokenChar);
    configService->addCharacteristic(*workspaceIdChar);
    configService->addCharacteristic(*projectIdsChar);
    configService->addCharacteristic(*statusChar);
    
    // Add service to BLE
    BLE.addService(*configService);
    BLE.setAdvertisedService(*configService);
    
    // Start advertising
    BLE.advertise();
    
    // Mark as initialized
    bleInitialized = true;
    
    Serial.println("TimeTracker BLE service started");
    Serial.println("Device name: " + deviceName);
    Serial.println("Ready for configuration via TimeTrackerConfigApp");
    
    return true;
}

void simpleBLEPoll() {
    static bool wasConnected = false;
    bool isCurrentlyConnected = BLE.connected();
    
    BLE.poll();
    
    // Detect disconnect event and restore device name
    if (wasConnected && !isCurrentlyConnected) {
        Serial.println("BLE client disconnected - restoring device name...");
        
        if (deviceName.length() > 0) {
            BLE.setDeviceName(deviceName.c_str());
            BLE.setLocalName(deviceName.c_str());
            Serial.println("Device name restored after disconnect: " + deviceName);
        } else {
            Serial.println("WARNING: No device name to restore after disconnect!");
        }
    }
    
    wasConnected = isCurrentlyConnected;
}

bool isConfigComplete() {
    return configComplete;
}

String getWifiSSID() {
    return receivedSSID;
}

String getWifiPassword() {
    return receivedPassword;
}

String getTogglToken() {
    return receivedToken;
}

String getWorkspaceId() {
    return receivedWorkspace;
}

const int* getProjectIds() {
    return receivedProjectIds;
}

extern "C" void updateBLEStatus(const char* status) {
    if (statusChar) {
        statusChar->writeValue(status);
    }
}